package cmd

import (
	"context"
	"fmt"
	"log/slog"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"{{.Module}}/internal/{{.AppPkg}}/router"
	"{{.Module}}/pkg/middleware"

	"github.com/go-chi/chi/v5"
	chi_middleware "github.com/go-chi/chi/v5/middleware"
	"github.com/noble-gase/ne/cors"
	"github.com/spf13/viper"
	"github.com/urfave/cli/v3"
)

func serve() *cli.Command {
	return &cli.Command{
		Name:  "serve",
		Usage: "Serve the application",
		Action: func(ctx context.Context, cmd *cli.Command) error {
			// make sure we have a working tempdir in minimal containers, because:
			// os.TempDir(): The directory is neither guaranteed to exist nor have accessible permissions.
			if err := os.MkdirAll(os.TempDir(), 0o775); err != nil {
				slog.ErrorContext(ctx, "os.MkdirAll(os.TempDir()) failed", slog.Any("error", err))
			}
			serving(ctx)
			return nil
		},
	}
}

func serving(ctx context.Context) {
	// 跨域设置
	withCors := cors.New(cors.ACEH(middleware.XTraceId))
	// 创建路由
	r := chi.NewRouter()
	// middleware
	r.Use(withCors.Handler, middleware.TraceId, middleware.Recovery)
	// pprof
	r.Mount("/debug", chi_middleware.Profiler())
	// 注册路由
	router.App(r)

	// 创建服务
	srv := &http.Server{
		Addr:         ":" + viper.GetString("app.port"),
		Handler:      r,
		ReadTimeout:  10 * time.Second,
		WriteTimeout: 20 * time.Second,
		IdleTimeout:  60 * time.Second,
	}

	// 信号监听
	sigCtx, stop := signal.NotifyContext(ctx, syscall.SIGHUP, syscall.SIGINT, syscall.SIGQUIT, syscall.SIGTERM)
	defer stop()

	// 启动服务
	go func() {
		fmt.Println("serving on", srv.Addr)
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			panic(fmt.Errorf("ListenAndServe: %w", err))
		}
	}()

	// 阻塞直到接收到信号
	<-sigCtx.Done()
	fmt.Println("⌛️ 收到终止信号，正在关闭服务...")

	// 关闭服务
	shutCtx, cancel := context.WithTimeout(ctx, 30*time.Second)
	defer cancel()
	if err := srv.Shutdown(shutCtx); err != nil {
		slog.ErrorContext(ctx, "server shutdown failed", slog.String("error", err.Error()))
	}
}
