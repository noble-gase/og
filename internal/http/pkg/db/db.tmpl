package db

import (
	"context"
	"errors"
	"fmt"
	"log/slog"
	"time"

	"entgo.io/ent/dialect"
	entsql "entgo.io/ent/dialect/sql"
	"github.com/noble-gase/ne/sqls"
	"github.com/spf13/cast"
	"github.com/spf13/viper"
)

var ErrClientNil = errors.New("ent client is nil (forgotten initialize?)")

// InitDriver 初始化Ent实例(如有多个实例，在此方法中初始化)
func InitDriver(driverName, cfgName string) (dialect.Driver, error) {
	cfg := &sqls.Config{
		Driver: driverName,
		DSN:    viper.GetString(cfgName + ".dsn"),
	}
	if driverName == dialect.Postgres {
		cfg.Driver = "pgx"
	}

	opts := viper.GetStringMap(cfgName + ".options")
	if len(opts) != 0 {
		cfg.MaxOpenConns = cast.ToInt(opts["max_open_conns"])
		cfg.MaxIdleConns = cast.ToInt(opts["max_idle_conns"])
		cfg.ConnMaxLifetime = cast.ToDuration(opts["conn_max_lifetime"]) * time.Second
		cfg.ConnMaxIdleTime = cast.ToDuration(opts["conn_max_idle_time"]) * time.Second
	}

	db, err := sqls.NewDB(cfg)
	if err != nil {
		return nil, err
	}

	driver := entsql.OpenDB(driverName, db)
	if viper.GetBool("app.debug") {
		return dialect.DebugWithContext(driver, func(ctx context.Context, v ...any) {
			slog.InfoContext(ctx, "SQL log", slog.String("sql", fmt.Sprint(v...)))
		}), nil
	}
	return driver, nil
}
