package db

import (
	"context"
	"database/sql"
	"errors"
	"log/slog"

	. "github.com/go-jet/jet/v2/mysql"
	"github.com/go-jet/jet/v2/qrm"
)

// Create 创建记录
//
//	// 导入模块
//	import . "github.com/go-jet/jet/v2/mysql"
//
//	// 语句示例
//	table.Demo.INSERT(table.Demo.Name).VALUES("demo")
//
//	// 创建方法
//	db.Create(ctx, db.DB(), stmt)
func Create(ctx context.Context, db *sql.DB, stmt InsertStatement) (int64, error) {
	if db == nil {
		return 0, ErrDbNil
	}

	// SQL日志
	slog.InfoContext(ctx, stmt.DebugSql())

	ret, err := stmt.ExecContext(ctx, db)
	if err != nil {
		return 0, err
	}
	return ret.LastInsertId()
}

// Update 更新记录
//
//	// 导入模块
//	import . "github.com/go-jet/jet/v2/mysql"
//
//	// 语句示例
//	table.Demo.UPDATE(table.Demo.Name).SET("demo").WHERE(table.Demo.ID.EQ(Int64(1)))
//
//	// 更新方法
//	db.Update(ctx, db.DB(), stmt)
func Update(ctx context.Context, db *sql.DB, stmt UpdateStatement) (int64, error) {
	if db == nil {
		return 0, ErrDbNil
	}

	// SQL日志
	slog.InfoContext(ctx, stmt.DebugSql())

	ret, err := stmt.ExecContext(ctx, db)
	if err != nil {
		return 0, err
	}
	return ret.RowsAffected()
}

// Delete 删除记录
//
//	// 导入模块
//	import . "github.com/go-jet/jet/v2/mysql"
//
//	// 语句示例
//	table.Demo.DELETE().WHERE(table.Demo.ID.EQ(Int64(1)))
//
//	// 删除方法
//	db.Delete(ctx, db.DB(), stmt)
func Delete(ctx context.Context, db *sql.DB, stmt DeleteStatement) error {
	if db == nil {
		return ErrDbNil
	}

	// SQL日志
	slog.InfoContext(ctx, stmt.DebugSql())

	_, err := stmt.ExecContext(ctx, db)
	return err
}

// FindOne 查询一条记录
//
//	// 导入模块
//	import . "github.com/go-jet/jet/v2/mysql"
//
//	// 语句示例
//	SELECT(table.Demo.AllColumns).FROM(table.Demo).WHERE(table.Demo.ID.EQ(Int64(1)))
//
//	// 查询方法
//	db.FindOne[model.Demo](ctx, db.DB(), stmt)
func FindOne[T any](ctx context.Context, db *sql.DB, stmt SelectStatement) (*T, error) {
	if db == nil {
		return nil, ErrDbNil
	}

	stmt = stmt.LIMIT(1)

	// SQL日志
	slog.InfoContext(ctx, stmt.DebugSql())

	var dest T
	if err := stmt.QueryContext(ctx, db, &dest); err != nil {
		if !errors.Is(err, qrm.ErrNoRows) {
			return nil, err
		}
		return nil, nil
	}
	return &dest, nil
}

// FindAll 查询多条记录
//
//	// 导入模块
//	import . "github.com/go-jet/jet/v2/mysql"
//
//	// 语句示例
//	SELECT(table.Demo.AllColumns).FROM(table.Demo).WHERE(table.Demo.Name.LIKE(String("%demo%")))
//
//	// 查询方法
//	db.FindAll[model.Demo](ctx, db.DB(), stmt)
//	// 或
//	db.FindAll[*model.Demo](ctx, db.DB(), stmt)
func FindAll[T any](ctx context.Context, db *sql.DB, stmt SelectStatement) ([]T, error) {
	if db == nil {
		return nil, ErrDbNil
	}

	// SQL日志
	slog.InfoContext(ctx, stmt.DebugSql())

	var dest []T
	if err := stmt.QueryContext(ctx, db, &dest); err != nil {
		return nil, err
	}
	return dest, nil
}

// Count 返回记录数
//
//	// 导入模块
//	import . "github.com/go-jet/jet/v2/mysql"
//
//	// 语句示例
//	SELECT(COUNT(STAR).AS("count")).FROM(table.Demo).WHERE(table.Demo.Name.LIKE(String("%demo%")))
//
//	// 查询方法
//	db.Count(ctx, db.DB(), stmt)
func Count(ctx context.Context, db *sql.DB, stmt SelectStatement) (int64, error) {
	if db == nil {
		return 0, ErrDbNil
	}

	// SQL日志
	slog.InfoContext(ctx, stmt.DebugSql())

	var total struct {
		Count int64
	}
	if err := stmt.QueryContext(ctx, db, &total); err != nil {
		return 0, err
	}
	return total.Count, nil
}

// Paginate 分页查询
//
//	// 导入模块
//	import . "github.com/go-jet/jet/v2/mysql"
//
//	// 语句示例 (count)
//	SELECT(COUNT(STAR).AS("count")).FROM(table.Demo).WHERE(table.Demo.Name.LIKE(String("%demo%")))
//
//	// 语句示例 (query)
//	SELECT(table.Demo.AllColumns).FROM(table.Demo).WHERE(table.Demo.Name.LIKE(String("%demo%")))
//
//	// 查询方法
//	db.Paginate[model.Demo](ctx, db.DB(), count, query, 1, 10)
//	// 或
//	db.Paginate[*model.Demo](ctx, db.DB(), count, query, 1, 10)
func Paginate[T any](ctx context.Context, db *sql.DB, count, query SelectStatement, page, size int) ([]T, int64, error) {
	if db == nil {
		return nil, 0, ErrDbNil
	}

	// SQL日志
	slog.InfoContext(ctx, count.DebugSql())

	var total struct {
		Count int64
	}
	if err := count.QueryContext(ctx, db, &total); err != nil {
		return nil, 0, err
	}

	var dest []T
	if total.Count > 0 {
		if page <= 0 {
			page = 1
		}
		if size <= 0 {
			size = 20
		}

		query = query.LIMIT(int64(size)).OFFSET(int64((page - 1) * size))

		// SQL日志
		slog.InfoContext(ctx, query.DebugSql())

		if err := query.QueryContext(ctx, db, &dest); err != nil {
			return nil, 0, err
		}
	}
	return dest, total.Count, nil
}
