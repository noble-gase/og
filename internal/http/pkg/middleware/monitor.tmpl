package middleware

import (
	"net/http"
	"strconv"
	"time"

	"github.com/go-chi/chi/v5/middleware"
	"github.com/prometheus/client_golang/prometheus"
)

var (
	// 请求次数
	reqCnt = prometheus.NewCounterVec(prometheus.CounterOpts{
		Name: "request_count",
		Help: "Total number of HTTP requests",
	}, []string{"method", "path", "status"})

	// 请求时长
	reqDur = prometheus.NewHistogramVec(prometheus.HistogramOpts{
		Name: "request_duration",
		Help: "HTTP request duration (ms)",
	}, []string{"method", "path", "status"})
)

func init() {
	prometheus.MustRegister(reqCnt)
	prometheus.MustRegister(reqDur)
}

// Monitor 监控
func Monitor(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		now := time.Now().Local()
		ww := middleware.NewWrapResponseWriter(w, r.ProtoMajor)

		defer func() {
			status := strconv.Itoa(ww.Status())

			// 请求次数
			reqCnt.WithLabelValues(r.Method, r.URL.Path, status).Inc()

			// 请求时长
			reqDur.WithLabelValues(r.Method, r.URL.Path, status).Observe(float64(time.Since(now).Milliseconds()))
		}()

		next.ServeHTTP(ww, r)
	})
}
