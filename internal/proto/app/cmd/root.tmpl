package cmd

import (
	"context"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"{{.Module}}/internal/{{.AppPkg}}/config"
	"{{.Module}}/internal/{{.AppPkg}}/router"
	"{{.Module}}/pkg/log"
	"{{.Module}}/pkg/middleware"
	"{{.Module}}/pkg/trace"

	"github.com/go-chi/chi/v5"
	chi_middleware "github.com/go-chi/chi/v5/middleware"
	"github.com/noble-gase/ne/cors"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"go.uber.org/zap"
)

var cfgFile string

var root = &cobra.Command{
	Use:         "{{.Module}}",
	Short:       "Go App",
	Long:        "Go App (build with cobra | viper | zap | ent | chi)",
	Annotations: map[string]string{},
	Version:     "v1.0.0",
	PersistentPreRun: func(cmd *cobra.Command, args []string) {
		config.Init(cfgFile)
	},
	PersistentPostRun: func(cmd *cobra.Command, args []string) {
		config.CleanUp()
	},
	Run: func(cmd *cobra.Command, args []string) {
		// make sure we have a working tempdir in minimal containers, because:
		// os.TempDir(): The directory is neither guaranteed to exist nor have accessible permissions.
		if err := os.MkdirAll(os.TempDir(), 0o775); err != nil {
			log.Error(context.Background(), "create temp dir failed", zap.Error(err))
		}
		serving()
	},
}

func serving() {
	// 跨域设置
	withCors := cors.New(cors.ACEH(trace.TraceId))
	// 创建路由
	r := chi.NewRouter()
	// middleware
	r.Use(withCors.Handler, middleware.TraceId, middleware.Recovery)
	// pprof
	r.Mount("/debug", chi_middleware.Profiler())
	// 注册路由
	router.App(r)

	// 创建服务
	srv := &http.Server{
		Addr:         ":" + viper.GetString("app.port"),
		Handler:      r,
		ReadTimeout:  10 * time.Second,
		WriteTimeout: 20 * time.Second,
		IdleTimeout:  60 * time.Second,
	}

	// 清理资源
	defer config.CleanUp()

	// 信号监听
	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGHUP, syscall.SIGINT, syscall.SIGQUIT, syscall.SIGTERM)
	defer stop()

	// 启动服务
	go func(ctx context.Context) {
		log.Info(ctx, "server start", zap.String("addr", srv.Addr))
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Error(ctx, "serving error", zap.Error(err))
		}
	}(ctx)

	// 阻塞直到接收到信号
	<-ctx.Done()

	// 关闭服务(设定超时10秒优雅关闭)
	shutdownCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := srv.Shutdown(shutdownCtx); err != nil {
		log.Error(ctx, "server shutdown failed", zap.Error(err))
	}
}
