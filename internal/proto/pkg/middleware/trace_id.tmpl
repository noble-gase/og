package middleware

import (
	"net/http"
	"strings"

	"github.com/google/uuid"
	"github.com/noble-gase/ne/metadata"
)

const XTraceId = "x-trace-id"

// TraceId is a middleware that injects a trace ID into the context of each request.
func TraceId(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		md, ok := metadata.FromIncomingContext(ctx)
		if !ok {
			md = metadata.Pairs()
		}

		// traceId
		var traceId string
		if vals := md.Get(XTraceId); len(vals) != 0 {
			traceId = vals[0]
		} else {
			traceId = r.Header.Get(XTraceId)
			if len(traceId) == 0 {
				traceId = strings.ReplaceAll(uuid.New().String(), "-", "")
			}
			md.Set(XTraceId, traceId)
		}

		// set response header
		w.Header().Set(XTraceId, traceId)

		// reset request context
		next.ServeHTTP(w, r.WithContext(metadata.NewIncomingContext(ctx, md)))
	})
}

