// Code generated by protoc-gen-og. DO NOT EDIT.
// versions:
// - protoc-gen-og v0.0.4
// - protoc           (unknown)
// source: greeter.proto

package {{.ApiName}}

import (
	context "context"
	errors "errors"
	v5 "github.com/go-chi/chi/v5"
	v2 "github.com/go-resty/resty/v2"
	ne "github.com/noble-gase/ne"
	codes "github.com/noble-gase/ne/codes"
	protos "github.com/noble-gase/ne/protos"
	result "github.com/noble-gase/ne/result"
	http "net/http"
)

// GreeterServiceHttpServer is the server API definition for GreeterService
type GreeterServiceHttpServer interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest) (*HelloResponse, error)
}

// UnimplementedGreeterServiceHttpServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreeterServiceHttpServer struct{}

func (UnimplementedGreeterServiceHttpServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, errors.New("method SayHello not implemented")
}

func RegisterGreeterServiceHttpServer(r v5.Router, svc GreeterServiceHttpServer) {
	// Sends a greeting
	r.Post("/v1/greeter", _GreeterService_SayHello(svc))
	r.Get("/v1/greeter", _GreeterService_SayHello(svc))
}

// Sends a greeting
func _GreeterService_SayHello(svc GreeterServiceHttpServer) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()
		// parse request
		req := new(HelloRequest)
		if err := ne.BindProto(r, req); err != nil {
			result.Err(codes.FromError(err)).JSON(w, r)
			return
		}
		// call service
		resp, err := svc.SayHello(ctx, req)
		if err != nil {
			result.Err(err, resp).JSON(w, r)
			return
		}
		result.OK(resp).JSON(w, r)
	}
}

// --------------------------------------------- http client ---------------------------------------------

// GreeterServiceHttpClient is the client API definition for GreeterService
type GreeterServiceHttpClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...protos.RequestOption) (*HelloResponse, error)
}

type greeterServiceHttpClient struct {
	client *v2.Client
}

// NewGreeterServiceHttpClient returns a client for GreeterServiceHttpClient. Typically requires WithBaseURL
func NewGreeterServiceHttpClient(hc *http.Client, opts ...protos.ClientOption) GreeterServiceHttpClient {
	c := v2.NewWithClient(hc)
	for _, f := range opts {
		f(c)
	}
	return &greeterServiceHttpClient{client: c}
}

// Sends a greeting
func (c *greeterServiceHttpClient) SayHello(ctx context.Context, in *HelloRequest, opts ...protos.RequestOption) (*HelloResponse, error) {
	req := c.client.R().SetContext(ctx)
	for _, f := range opts {
		f(req)
	}
	// set request body
	switch ne.ContentType(req.Header) {
	case ne.ContentForm, ne.ContentMultipartForm:
		req.SetFormDataFromValues(protos.MessageToValues(in))
	default:
		req.SetHeader(ne.HeaderContentType, ne.ContentJSON).SetBody(in)
	}
	// send request
	ret := new(protos.ApiResult[*HelloResponse])
	if _, err := req.SetResult(ret).Post("/v1/greeter"); err != nil {
		return nil, err
	}
	if ret.Code != 0 {
		return nil, codes.New(ret.Code, ret.Msg)
	}
	return ret.Data, nil
}
