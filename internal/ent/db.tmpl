package {{.AppName}}

import (
	"context"
	"errors"
	"fmt"
	"log/slog"
	"runtime/debug"

	"{{.Module}}/pkg/db"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/spf13/viper"
)

var client *Client

func DB() *Client {
	if client == nil {
		panic("ent client is nil (forgotten initialize?)")
	}
	return client
}

func Init(cfgName string) {
	name := viper.GetString(cfgName + ".driver")
	driver := sql.OpenDB(name, db.New(cfgName))
	client = NewClient(dialect.DebugWithContext(driver, func(ctx context.Context, v ...any) {
		slog.InfoContext(ctx, fmt.Sprint(v...))
	}))
}

// Transaction Executes ent transaction with callback function.
// The provided context is used until the transaction is committed or rolledback.
func Transaction(ctx context.Context, fn func(ctx context.Context, tx *Tx) error) (err error) {
	if client == nil {
		return errors.New("ent client is nil (forgotten initialize?)")
	}

	tx, _err := client.Tx(ctx)
	if _err != nil {
		err = fmt.Errorf("begin transaction: %w", _err)
		return
	}

	rollback := func(err error) error {
		if e := tx.Rollback(); e != nil {
			err = fmt.Errorf("%w; rollback: %w", err, e)
		}
		return err
	}

	defer func() {
		if r := recover(); r != nil {
			// if panic, should rollback
			e := fmt.Errorf("transaction panic recovered: %+v", r)
			err = fmt.Errorf("%w\n%s", rollback(e), string(debug.Stack()))
		}
	}()

	if e := fn(ctx, tx); e != nil {
		err = rollback(e)
		return
	}

	if e := tx.Commit(); e != nil {
		err = fmt.Errorf("commit: %w", e)
	}
	return
}
