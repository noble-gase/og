package {{.AppName}}

import (
	"context"
	"fmt"
	"runtime/debug"

	"{{.Module}}/pkg/db"
	"{{.Module}}/pkg/log"

	"entgo.io/ent/dialect"
	"go.uber.org/zap"
)

var DB *Client

func Init(ctx context.Context, cfgName string) {
	driver, err := db.InitDBDriver(dialect.MySQL, cfgName)
	if err != nil {
		log.Panic(ctx, "数据库初始化失败", zap.Error(err))
	}
	DB = NewClient(Driver(driver))
}

// Transaction Executes ent transaction with callback function.
// The provided context is used until the transaction is committed or rolledback.
func Transaction(ctx context.Context, fn func(ctx context.Context, tx *Tx) error) (err error) {
	tx, _err := DB.Tx(ctx)
	if _err != nil {
		err = fmt.Errorf("begin transaction: %w", _err)
		return
	}

	rollback := func(err error) error {
		if e := tx.Rollback(); e != nil {
			err = fmt.Errorf("%w; rollback: %w", err, e)
		}
		return err
	}

	defer func() {
		if r := recover(); r != nil {
			// if panic, should rollback
			e := fmt.Errorf("transaction panic recovered: %+v", r)
			err = fmt.Errorf("%w\n%s", rollback(e), string(debug.Stack()))
		}
	}()

	if e := fn(ctx, tx); e != nil {
		err = rollback(e)
		return
	}

	if e := tx.Commit(); e != nil {
		err = fmt.Errorf("commit: %w", e)
	}
	return
}

func Close() {
	if DB != nil {
		_ = DB.Close()
	}
}
