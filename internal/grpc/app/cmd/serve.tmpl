package cmd

import (
	"context"
	"fmt"
	"log/slog"
	"os"
	"os/signal"
	"syscall"
	"time"

	"{{.Module}}/internal/{{.AppPkg}}/server"

	"github.com/spf13/viper"
	"github.com/urfave/cli/v3"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

func serve() *cli.Command {
	return &cli.Command{
		Name:  "serve",
		Usage: "Serve the application",
		Action: func(ctx context.Context, cmd *cli.Command) error {
			// make sure we have a working tempdir in minimal containers, because:
			// os.TempDir(): The directory is neither guaranteed to exist nor have accessible permissions.
			if err := os.MkdirAll(os.TempDir(), 0o775); err != nil {
				slog.ErrorContext(ctx, "os.MkdirAll(os.TempDir()) failed", slog.Any("error", err))
			}
			serving(ctx)
			return nil
		},
	}
}

func serving(ctx context.Context) {
	// 信号监听
	sigCtx, stop := signal.NotifyContext(ctx, syscall.SIGHUP, syscall.SIGINT, syscall.SIGQUIT, syscall.SIGTERM)
	defer stop()

	grpcAddr := ":" + viper.GetString("port.grpc")
	httpAddr := ":" + viper.GetString("port.http")

	// serve grpc
	grpcSrv := server.NewGrpcServer()
	go server.ServeGrpc(grpcSrv, grpcAddr)

	time.Sleep(time.Second)

	// serve http
	conn, err := grpc.NewClient(grpcAddr, grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		slog.ErrorContext(ctx, "grpc.NewClient failed", slog.String("error", err.Error()))
	}
	httpSrv := server.NewHttpServer(ctx, conn, httpAddr)
	go server.ServeHttp(httpSrv)

	// 阻塞直到接收到信号
	<-sigCtx.Done()
	fmt.Println("⌛️ 收到终止信号，正在关闭服务...")

	// 关闭http服务
	shutCtx, cancel := context.WithTimeout(ctx, 30*time.Second)
	defer cancel()
	if err := httpSrv.Shutdown(shutCtx); err != nil {
		slog.ErrorContext(ctx, "http server shutdown failed", slog.String("error", err.Error()))
	}
	// 断开grpc连接
	_ = conn.Close()

	// 关闭grpc服务
	grpcSrv.GracefulStop()
}
