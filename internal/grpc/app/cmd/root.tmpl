package cmd

import (
	"context"
	"os"
	"os/signal"
	"syscall"

	"{{.Module}}/internal/{{.AppPkg}}/config"
	"{{.Module}}/internal/{{.AppPkg}}/server"
	"{{.Module}}/pkg/log"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"go.uber.org/zap"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

var cfgFile string

var root = &cobra.Command{
	Use:         "{{.Module}}",
	Short:       "Go App",
	Long:        "Go App (build with cobra | viper | zap | ent | grpc)",
	Annotations: map[string]string{},
	Version:     "v1.0.0",
	PersistentPreRun: func(cmd *cobra.Command, args []string) {
		config.Init(cfgFile)
	},
	PersistentPostRun: func(cmd *cobra.Command, args []string) {
		config.CleanUp()
	},
	Run: func(cmd *cobra.Command, args []string) {
		// make sure we have a working tempdir in minimal containers, because:
		// os.TempDir(): The directory is neither guaranteed to exist nor have accessible permissions.
		if err := os.MkdirAll(os.TempDir(), 0o775); err != nil {
			log.Error(context.Background(), "create temp dir failed", zap.Error(err))
		}
		serving()
	},
}

func serving() {
	// 清理资源
	defer config.CleanUp()

	// 信号监听
	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGHUP, syscall.SIGINT, syscall.SIGQUIT, syscall.SIGTERM)
	defer stop()

	// serve grpc
	grpcSrv := server.NewGrpcServer(ctx)
	go server.ServeGrpc(ctx, grpcSrv)

	// serve http
	conn, err := grpc.NewClient("0.0.0.0:"+viper.GetString("port.grpc"), grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Error(ctx, "grpc.NewClient failed", zap.Error(err))
	}
	httpSrv := server.NewHttpServer(ctx, conn)
	go server.ServeHttp(ctx, httpSrv)

	// 阻塞直到接收到信号
	<-ctx.Done()

	// 关闭http服务
	if err := httpSrv.Shutdown(ctx); err != nil {
		log.Error(ctx, "http server shutdown failed", zap.Error(err))
	}
	// 断开grpc连接
	_ = conn.Close()

	// 关闭grpc服务
	grpcSrv.GracefulStop()
}
