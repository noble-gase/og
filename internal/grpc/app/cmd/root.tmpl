package cmd

import (
	"context"
	"os"
	"os/signal"
	"syscall"

	"{{.Module}}/internal/{{.AppPkg}}/config"
	"{{.Module}}/internal/{{.AppPkg}}/server"
	"{{.Module}}/pkg/log"

	"github.com/spf13/viper"
	"github.com/urfave/cli/v3"
	"go.uber.org/zap"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

func root() *cli.Command {
	return &cli.Command{
		Version:     "v1.0.0",
		Description: "Go App (build with og)",
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "config",
				Aliases: []string{"C"},
				Usage:   "设置配置文件",
				Value:   "config.toml",
			},
		},
		Before: func(ctx context.Context, cmd *cli.Command) (context.Context, error) {
			config.Init(ctx, cmd.String("config"))
			return ctx, nil
		},
		After: func(ctx context.Context, cmd *cli.Command) error {
			config.CleanUp(ctx)
			return nil
		},
		Action: func(ctx context.Context, cmd *cli.Command) error {
			// make sure we have a working tempdir in minimal containers, because:
			// os.TempDir(): The directory is neither guaranteed to exist nor have accessible permissions.
			if err := os.MkdirAll(os.TempDir(), 0o775); err != nil {
				log.Error(ctx, "create temp dir failed", zap.Error(err))
			}
			serving(ctx)
			return nil
		},
	}
}

func serving(ctx context.Context) {
	// 信号监听
	sigCtx, stop := signal.NotifyContext(ctx, syscall.SIGHUP, syscall.SIGINT, syscall.SIGQUIT, syscall.SIGTERM)
	defer stop()

	// serve grpc
	grpcSrv := server.NewGrpcServer(ctx)
	go server.ServeGrpc(ctx, grpcSrv)

	// serve http
	conn, err := grpc.NewClient("0.0.0.0:"+viper.GetString("port.grpc"), grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Error(ctx, "grpc.NewClient failed", zap.Error(err))
	}
	httpSrv := server.NewHttpServer(ctx, conn)
	go server.ServeHttp(ctx, httpSrv)

	// 阻塞直到接收到信号
	<-sigCtx.Done()

	// 关闭http服务
	shutCtx, cancel := context.WithTimeout(ctx, 30*time.Second)
	defer cancel()
	if err := httpSrv.Shutdown(shutCtx); err != nil {
		log.Error(ctx, "http server shutdown failed", zap.Error(err))
	}
	// 断开grpc连接
	_ = conn.Close()

	// 关闭grpc服务
	grpcSrv.GracefulStop()
}
