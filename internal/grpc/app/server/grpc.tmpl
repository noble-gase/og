package server

import (
	"fmt"
	"net"

	"{{.Module}}/{{.ApiPkg}}"
	"{{.Module}}/internal/{{.AppPkg}}/service/greeter"
	"{{.Module}}/pkg/middleware"

	"google.golang.org/grpc"
	"google.golang.org/grpc/health"
	"google.golang.org/grpc/health/grpc_health_v1"
	"google.golang.org/grpc/reflection"
)

func NewGrpcServer() *grpc.Server {
	srv := grpc.NewServer(grpc.ChainUnaryInterceptor(
		middleware.TraceId,
		middleware.Recovery,
		middleware.Metrics,
		middleware.Log,
		middleware.Validator,
	))

	// 服务注册
	registerGrpc(srv)

	// 启用Reflection
	reflection.Register(srv)

	return srv
}

func ServeGrpc(srv *grpc.Server, addr string) {
	// Create a listener on TCP port
	lis, err := net.Listen("tcp", addr)
	if err != nil {
		panic(fmt.Errorf("ServeGrpc: %w", err))
	}

	// Serve gRPC server
	fmt.Println("Serving gRPC on", addr)
	if err := srv.Serve(lis); err != nil {
		panic(fmt.Errorf("ServeGrpc: %w", err))
	}
}

// 服务注册
func registerGrpc(s *grpc.Server) {
	grpc_health_v1.RegisterHealthServer(s, health.NewServer())

	// 自定义服务
	{{.ApiName}}.RegisterGreeterServiceServer(s, greeter.New())
}
