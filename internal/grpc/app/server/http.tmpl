package server

import (
	"context"
	"fmt"
	"net/http"
	"strings"
	"time"

	"{{.Module}}/{{.ApiPkg}}"
	"{{.Module}}/pkg/log"
	"{{.Module}}/pkg/trace"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/noble-gase/ne/cors"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"go.uber.org/zap"
	"google.golang.org/grpc"
	"google.golang.org/grpc/health/grpc_health_v1"
	"google.golang.org/protobuf/encoding/protojson"
)

func NewHttpServer(ctx context.Context, conn *grpc.ClientConn, addr string) *http.Server {
	// Create http mux with health check
	mux := runtime.NewServeMux(
		runtime.WithHealthzEndpoint(grpc_health_v1.NewHealthClient(conn)),
		runtime.WithIncomingHeaderMatcher(func(s string) (string, bool) {
			if v, ok := runtime.DefaultHeaderMatcher(s); ok {
				return v, true
			}
			return strings.ToLower(s), true
		}),
		runtime.WithOutgoingHeaderMatcher(func(s string) (string, bool) {
			if s == trace.TraceId {
				return s, true
			}
			return runtime.MetadataHeaderPrefix + s, true
		}),
		runtime.WithErrorHandler(func(ctx context.Context, mux *runtime.ServeMux, m runtime.Marshaler, w http.ResponseWriter, r *http.Request, err error) {
			_err := &runtime.HTTPStatusError{
				HTTPStatus: http.StatusOK,
				Err:        err,
			}
			runtime.DefaultHTTPErrorHandler(ctx, mux, m, w, r, _err)
		}),
		runtime.WithMarshalerOption(runtime.MIMEWildcard, &runtime.JSONPb{
			MarshalOptions: protojson.MarshalOptions{
				EmitUnpopulated: true, // 包括未设置（零值）的字段
			},
			UnmarshalOptions: protojson.UnmarshalOptions{
				DiscardUnknown: true, // 忽略未知字段
			},
		}),
	)
	// Register http handler
	if err := registerHttp(ctx, mux, conn); err != nil {
		log.Fatal(ctx, "register http failed", zap.Error(err))
	}
	// With CORS
	withCors := cors.New(cors.ACEH(trace.TraceId)).Handler(mux)
	// Serve HTTP server
	srv := &http.Server{
		Addr:         addr,
		Handler:      withCors,
		ReadTimeout:  10 * time.Second,
		WriteTimeout: 20 * time.Second,
		IdleTimeout:  60 * time.Second,
	}
	return srv
}

func ServeHttp(ctx context.Context, srv *http.Server) {
	log.Info(ctx, "HTTP server start", zap.String("addr", srv.Addr))
	if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
		log.Fatal(ctx, "HTTP serving error", zap.Error(err))
	}
}

// 服务注册
func registerHttp(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	mux.HandlePath(http.MethodGet, "/metrics", runtime.HandlerFunc(func(w http.ResponseWriter, r *http.Request, pathParams map[string]string) {
		promhttp.Handler().ServeHTTP(w, r)
	}))
	// 注册服务
	if err := {{.ApiName}}.RegisterGreeterServiceHandler(ctx, mux, conn); err != nil {
		return fmt.Errorf("RegisterGreeterServiceHandler: %w", err)
	}
	return nil
}
