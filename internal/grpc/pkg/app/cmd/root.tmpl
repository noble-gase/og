package cmd

import (
	"context"
	"os"
	"os/signal"
	"syscall"

	"{{.Module}}/pkg/{{.AppPkg}}/config"
	"{{.Module}}/pkg/{{.AppPkg}}/server"
	"{{.Module}}/pkg/lib/log"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"go.uber.org/zap"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

var cfgFile string

var root = &cobra.Command{
	Use:         "{{.AppName}}",
	Short:       "Go App",
	Long:        "Go App (build with cobra | viper | zap | ent | grpc)",
	Annotations: map[string]string{},
	Version:     "v1.0.0",
	PersistentPreRun: func(cmd *cobra.Command, args []string) {
		config.Init(context.Background(), cfgFile)
	},
	Run: func(cmd *cobra.Command, args []string) {
		// make sure we have a working tempdir in minimal containers, because:
		// os.TempDir(): The directory is neither guaranteed to exist nor have accessible permissions.
		if err := os.MkdirAll(os.TempDir(), 0o775); err != nil {
			log.Error(context.Background(), "create temp dir failed", zap.Error(err))
		}
		serving(context.Background())
	},
}

func serving(ctx context.Context) {
	// 创建一个通道来监听信号
	quit := make(chan os.Signal, 1)
	// 监听特定的系统信号
	signal.Notify(quit, syscall.SIGHUP, syscall.SIGINT, syscall.SIGQUIT, syscall.SIGTERM)
	// serve grpc
	grpcSrv := server.NewGrpcServer(ctx)
	go server.ServeGrpc(ctx, grpcSrv)
	// serve http
	// Create a gRPC client conn
	conn, err := grpc.NewClient("0.0.0.0:"+viper.GetString("port.grpc"), grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatal(ctx, "grpc.NewClient failed", zap.Error(err))
	}
	httpSrv := server.NewHttpServer(ctx, conn)
	go server.ServeHttp(ctx, httpSrv)
	// 处理信号
	sig := <-quit
	log.Warn(context.TODO(), "Received system signal", zap.String("signal", sig.String()))
	// 关闭http服务
	if err := httpSrv.Shutdown(ctx); err != nil {
		log.Error(ctx, "http server shutdown failed", zap.Error(err))
	}
	// 断开grpc连接
	_ = conn.Close()
	// 关闭grpc服务
	grpcSrv.GracefulStop()
	// 执行清理操作
	config.CleanUp()
	// 退出程序
	os.Exit(0)
}
