package middleware

import (
	"context"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"google.golang.org/grpc"
)

var (
	// 请求次数
	reqCnt = prometheus.NewCounterVec(prometheus.CounterOpts{
		Name: "request_count",
		Help: "The total number of grpc request",
	}, []string{"method", "status"})

	// 请求时长
	reqDur = prometheus.NewHistogramVec(prometheus.HistogramOpts{
		Name: "request_duration",
		Help: "The grpc request latency in seconds",
	}, []string{"method", "status"})
)

func init() {
	prometheus.MustRegister(reqCnt)
	prometheus.MustRegister(reqDur)
}

// Monitor 监控
func Monitor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (resp interface{}, err error) {
	now := time.Now().Local()

	defer func() {
		status := "OK"
		if err != nil {
			status = "ERR"
		}

		// 请求次数
		reqCnt.With(prometheus.Labels{
			"method": info.FullMethod,
			"status": status,
		}).Inc()

		// 请求时长
		reqDur.With(prometheus.Labels{
			"method": info.FullMethod,
			"status": status,
		}).Observe(time.Since(now).Seconds())
	}()

	resp, err = handler(ctx, req)
	return
}
