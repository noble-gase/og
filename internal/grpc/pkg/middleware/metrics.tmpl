package middleware

import (
	"context"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"google.golang.org/grpc"
)

var (
	// 请求次数
	reqCnt = prometheus.NewCounterVec(prometheus.CounterOpts{
		Name: "request_count",
		Help: "gRPC total requests",
	}, []string{"method", "status"})

	// 请求时长
	reqDur = prometheus.NewHistogramVec(prometheus.HistogramOpts{
		Name:    "request_duration",
		Help:    "gRPC request duration (ms)",
		Buckets: []float64{5, 10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000},
	}, []string{"method", "status"})
)

func init() {
	prometheus.MustRegister(reqCnt)
	prometheus.MustRegister(reqDur)
}

// Metrics 监控指标
func Metrics(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (resp interface{}, err error) {
	now := time.Now().Local()

	defer func() {
		duration := time.Since(now)

		status := "OK"
		if err != nil {
			status = "ERR"
		}

		// 请求次数
		reqCnt.WithLabelValues(info.FullMethod, status).Inc()
		// 请求时长
		reqDur.WithLabelValues(info.FullMethod, status).Observe(float64(duration.Milliseconds()))
	}()

	resp, err = handler(ctx, req)
	return
}
