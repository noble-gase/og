package middleware

import (
	"context"
	"encoding/json"
	"log/slog"
	"time"

	"google.golang.org/grpc"
)

const HealthCheckMethod = "/grpc.health.v1.Health/Check"

func Log(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (resp interface{}, err error) {
	now := time.Now().Local()

	defer func() {
		if info.FullMethod == HealthCheckMethod {
			return
		}

		// request
		reqBody := []byte("<nil>")
		if req != nil {
			reqBody, _ = json.Marshal(req)
		}

		// response
		respBody := []byte("<nil>")
		if resp != nil {
			respBody, _ = json.Marshal(resp)
		}

		// error
		errInfo := "<nil>"
		if err != nil {
			errInfo = err.Error()
		}

		slog.InfoContext(ctx, "request log",
			slog.String("method", info.FullMethod),
			slog.String("request", string(reqBody)),
			slog.String("response", string(respBody)),
			slog.String("error", errInfo),
			slog.String("duration", time.Since(now).String()),
		)
	}()

	resp, err = handler(ctx, req)
	return
}
